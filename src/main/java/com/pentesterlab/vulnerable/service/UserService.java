package com.pentesterlab.vulnerable.service;

import com.pentesterlab.vulnerable.entity.Role;
import com.pentesterlab.vulnerable.entity.User;
import com.pentesterlab.vulnerable.repository.RoleRepository;
import com.pentesterlab.vulnerable.repository.UserRepository;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.TypedQuery;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import java.util.Arrays;

@Service
public class UserService {
    private UserRepository repo;
    private PasswordEncoder passwordEncoder;
    private RoleRepository roleRepository;
    private EntityManager entityManager;

    public UserService(UserRepository repo, PasswordEncoder passwordEncoder, RoleRepository roleRepository, EntityManager entityManager) {
        this.repo = repo;
        this.passwordEncoder = passwordEncoder;
        this.roleRepository = roleRepository;
        this.entityManager = entityManager;
    }

    public User findUsernameAndPassword(String username, String password) throws IllegalArgumentException, NoResultException {
        String encryptedPass =  passwordEncoder.encode(password);
        String jql = "from User where username=:username AND password=:encryptedPass";
        TypedQuery<User> u = entityManager.createQuery(jql, User.class).setParameter("username", username).setParameter("encryptedPass", encryptedPass);
        return  u.getSingleResult();
    }

    public void save(String username, String password) {
        User user = new User();
        user.setUsername(username);
        user.setPassword(passwordEncoder.encode(password));
        Role role = roleRepository.findByName("Role_User");
        if(role == null){
            role = checkRoleExist();
        }
        user.setRoles(Arrays.asList(role));
        repo.save(user);
    }

    public Long userCount() {
        Long count = repo.count();
        return count;
    }

    public Role checkRoleExist() {
        Role role = new Role();
        role.setName("Role_User");
        return roleRepository.save(role);
    }
}


